
CREATE TABLE person
(
	SSN char(8) UNIQUE,
	firstName varChar(50),
	lastName varChar(50),
	streetNumber int,
	streetName  varchar(20),
	aptNumber int,
	city varchar(20),
	state	varchar(20),
	postalCode char(6),
	PRIMARY KEY (SSN)
);

CREATE TABLE customer
(
	SSN char(8) UNIQUE,
	password varchar(20),
	registrationDate date,
	FOREIGN KEY (SSN) REFERENCES person(SSN) ON DELETE CASCADE,
	PRIMARY KEY (SSN)
);

CREATE TABLE manager 
(
	SSN char(8) UNIQUE,	
	FOREIGN KEY (SSN) REFERENCES person(SSN) ON DELETE CASCADE,
	PRIMARY KEY (SSN)
);

CREATE TABLE hotel_chain
(
	chainName varchar(20) UNIQUE,
	streetNumber int,
	streetName varchar(20),
	city varchar(20),
	state varchar(20),
	postalCode varchar(6),
	numberOfHotels int,
	PRIMARY KEY (chainName)
);

CREATE TABLE chain_email 
(
	chainName varchar(20),
	email varchar(50),
	FOREIGN KEY (chainName) REFERENCES hotel_chain(chainName) ON DELETE CASCADE,
	CONSTRAINT PK_chain_email PRIMARY KEY (chainName, email)
);

CREATE TABLE chain_phone_number
(
	chainName varchar(20),
	phoneNumber varchar(10),
	FOREIGN KEY (chainName) REFERENCES hotel_chain(chainName) ON DELETE CASCADE,
	CONSTRAINT PK_chain_phone_number PRIMARY KEY (chainName, phoneNumber)
);

CREATE TABLE hotel
(
	SSN char(8),
	chainName varchar(20),
	hotelName varchar(20),
	starRating int,
	streetNumber int,
	streetName varchar(20),
	city varchar(20),
	state varchar(20),
	postalCode varchar(6),
	numberOfRooms int,
	FOREIGN KEY (SSN) REFERENCES manager(SSN),
	FOREIGN KEY (chainName) REFERENCES hotel_chain(chainName) ON DELETE CASCADE,
	CONSTRAINT PK_hotel PRIMARY KEY (chainName, hotelName)
);

CREATE TABLE employee
(
	chainName varchar(20),
	hotelName varchar(20),	
	SSN char(8) UNIQUE,	
	position varchar (30),
	username varchar(20) UNIQUE,
	password varchar(20),
	FOREIGN KEY (chainName,hotelName) REFERENCES hotel(chainName,hotelName) ON DELETE CASCADE,
	FOREIGN KEY (SSN) REFERENCES person(SSN) ON DELETE CASCADE,
	PRIMARY KEY (SSN)	
);

CREATE TABLE hotel_email
(
	chainName varchar(20),
	hotelName varchar(20),
	email varchar(50),
	FOREIGN KEY (chainName,hotelName) REFERENCES hotel(chainName,hotelName) ON DELETE CASCADE,
	CONSTRAINT PK_hotel_email PRIMARY KEY (chainName, hotelName, email)
);

CREATE TABLE hotel_phone_number
(
	chainName varchar(20),
	hotelName varchar(20),
	phoneNumber varchar(10),
	FOREIGN KEY (chainName,hotelName) REFERENCES hotel(chainName,hotelName) ON DELETE CASCADE,
	CONSTRAINT PK_hotel_phone_number PRIMARY KEY (chainName, hotelName, phoneNumber)
);

CREATE TABLE room
(
	chainName varchar(20),
	hotelName varchar(20),
	roomNumber int,
	price Numeric(6,2),
	capacity varChar(20),
	view varChar(20),
	extendable boolean,
	problems text,
	FOREIGN KEY (chainName,hotelName) REFERENCES hotel(chainName,hotelName) ON DELETE CASCADE,
	CONSTRAINT PK_room PRIMARY KEY (chainName, hotelName, roomNumber)
);

CREATE TABLE amenity
(
	chainName varchar(20),
	hotelName varchar(20),
	roomNumber int,
	type varChar (20),
	FOREIGN KEY (chainName,hotelName,roomNumber) REFERENCES room(chainName,hotelName,roomNumber) ON DELETE CASCADE,
	CONSTRAINT PK_amenity PRIMARY KEY (chainName, hotelName, roomNumber, type)
);

CREATE TABLE booking
(
	chainName varchar(20),
	hotelName varchar(20),
	roomNumber int,
	SSN char(8),
	bookingID char(10) UNIQUE,
	checkInDate date,
	checkOutDate date,
	FOREIGN KEY (chainName,hotelName,roomNumber) REFERENCES room(chainName,hotelName,roomNumber),
	FOREIGN KEY (SSN) REFERENCES customer(SSN),
	PRIMARY KEY (bookingID)
);

CREATE TYPE paymentStatus AS ENUM ('paid', 'pending');

CREATE TABLE renting 
(
	chainName varchar(20),
	hotelName varchar(20),
	roomNumber int,
	SSN char(8),
	rentingID char(10) UNIQUE,
	paymentStatus paymentStatus,
	checkInDate date,
	checkOutDate date,
	FOREIGN KEY (chainName,hotelName,roomNumber) REFERENCES room(chainName,hotelName,roomNumber),
	FOREIGN KEY (SSN) REFERENCES customer(SSN),
	PRIMARY KEY (rentingID)
);

CREATE TABLE check_in
(
	bookingID char(10) UNIQUE,
	rentingID char(10),
	FOREIGN KEY (bookingID) REFERENCES booking(bookingID),
	FOREIGN KEY (rentingID) REFERENCES renting(rentingID),
	PRIMARY KEY (bookingID)
);

CREATE OR REPLACE FUNCTION updateNumberofRooms() RETURNS TRIGGER AS 
$BODY$
DECLARE updatecount int;
begin
if (TG_OP = 'DELETE') THEN
  updatecount:= (select count(*) from room where hotelname = old.hotelname and chainname = old.chainname);
  update hotel set numberofrooms=updatecount where hotelname = old.hotelname and chainname = old.chainname;
  RETURN old;
ELSIF (TG_OP = 'INSERT') THEN
 updatecount := ( select count(*) from room where hotelname = new.hotelname and chainname = new.chainname);
  update hotel set numberofrooms=updatecount where hotelname = new.hotelname and chainname = new.chainname;
  return new;
END IF;
end;
$BODY$ LANGUAGE plpgsql;

create trigger updateNumberofRooms
AFTER INSERT OR DELETE ON room
FOR EACH ROW EXECUTE PROCEDURE updateNumberofRooms();

CREATE OR REPLACE FUNCTION updateNumberofHotels() RETURNS TRIGGER AS 
$BODY$
DECLARE updatecount int;
begin
if (TG_OP = 'DELETE') THEN
  updatecount:= (select count(*) from hotel where chainname = old.chainname);
  update hotel_chain set numberofhotels=updatecount where chainname = old.chainname;
  RETURN old;
ELSIF (TG_OP = 'INSERT') THEN
 updatecount := ( select count(*) from hotel where chainname = new.chainname);
  update hotel_chain set numberofhotels=updatecount where chainname = new.chainname;
  return new;
END IF;
end;
$BODY$ LANGUAGE plpgsql;

create trigger updateNumberofHotels
AFTER INSERT OR DELETE ON room
FOR EACH ROW EXECUTE PROCEDURE updateNumberofHotels();
